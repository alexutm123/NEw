{"ast":null,"code":"const getInvalidSquaresByPiece = (square, piece) => {\n  switch (piece) {\n    case \"bP\":\n      return getPawnSquaresAttacked(square).concat([square]);\n    case \"bR\":\n      return getRookSquaresAttacked(square).concat([square]);\n    case \"bN\":\n      return getKnightSquaresAttacked(square).concat([square]);\n    case \"bB\":\n      return getBishopSquaresAttacked(square).concat([square]);\n    case \"bQ\":\n      return getQueenSquaresAttacked(square).concat([square]);\n    // case \"bK\":\n    // return getKingSquaresAttacked(square).concat([square]);\n    default:\n      return [square];\n  }\n};\nconst CoordBySquare = square => {\n  const file = square[0];\n  const rank = square[1];\n  return [file.charCodeAt(0) - 97, rank - 1];\n};\n_c = CoordBySquare;\nconst SquareByCoord = coord => {\n  const file = String.fromCharCode(coord[0] + 97);\n  const rank = coord[1] + 1;\n  return file + rank;\n};\n_c2 = SquareByCoord;\nconst getPawnSquaresAttacked = square => {\n  const squares = [];\n  const coord = CoordBySquare(square);\n  if (coord[0] > 0) {\n    squares.push(SquareByCoord([coord[0] - 1, coord[1] - 1]));\n  }\n  if (coord[0] < 7) {\n    squares.push(SquareByCoord([coord[0] + 1, coord[1] - 1]));\n  }\n  return squares;\n};\nconst getRookSquaresAttacked = square => {\n  const squares = [];\n  const coord = CoordBySquare(square);\n  for (let i = 0; i < 8; i++) {\n    if (i !== coord[0]) {\n      squares.push(SquareByCoord([i, coord[1]]));\n    }\n    if (i !== coord[1]) {\n      squares.push(SquareByCoord([coord[0], i]));\n    }\n  }\n  return squares;\n};\nconst getKnightSquaresAttacked = square => {\n  const squares = [];\n  const coord = CoordBySquare(square);\n  for (let i = -2; i < 3; i++) {\n    for (let j = -2; j < 3; j++) {\n      if (Math.abs(i) + Math.abs(j) === 3) {\n        if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n          squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n        }\n      }\n    }\n  }\n  return squares;\n};\nconst getBishopSquaresAttacked = square => {\n  const squares = [];\n  const coord = CoordBySquare(square);\n  for (let i = 0; i < 8; i++) {\n    if (i !== coord[0]) {\n      if (i - coord[0] + coord[1] >= 0 && i - coord[0] + coord[1] < 8) {\n        squares.push(SquareByCoord([i, i - coord[0] + coord[1]]));\n      }\n      if (coord[0] - i + coord[1] >= 0 && coord[0] - i + coord[1] < 8) {\n        squares.push(SquareByCoord([i, coord[0] - i + coord[1]]));\n      }\n    }\n  }\n  return squares;\n};\nconst getQueenSquaresAttacked = square => {\n  return getRookSquaresAttacked(square).concat(getBishopSquaresAttacked(square));\n};\nconst getKingSquaresAttacked = square => {\n  const squares = [];\n  const coord = CoordBySquare(square);\n  for (let i = -1; i < 2; i++) {\n    for (let j = -1; j < 2; j++) {\n      if (i !== 0 || j !== 0) {\n        if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n          squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n        }\n      }\n    }\n  }\n  return squares;\n};\nconst getInvalidSquaresByPosition = position => {\n  const squares = [];\n  for (const [square, piece] of Object.entries(position)) {\n    if (piece !== \"wN\") {\n      squares.push(...getInvalidSquaresByPiece(square, piece));\n    }\n  }\n  return squares;\n};\nconst getSquarestoGo = exercise => {\n  if (exercise.squares_to_go === \"all\") {\n    const invalidSquares = getInvalidSquaresByPosition(exercise.position);\n    const squares = [];\n    for (let i = 1; i < 9; i++) {\n      for (let j = 1; j < 9; j++) {\n        const square = SquareByCoord([i - 1, j - 1]);\n        if (!invalidSquares.includes(square)) {\n          squares.push(square);\n        }\n      }\n    }\n    // sort squares by file and rank\n    // order by a1, b1, c1, d1, ..., h8, a2, ...\n    squares.sort((a, b) => {\n      if (a[1] === b[1]) {\n        return a.charCodeAt(0) - b.charCodeAt(0);\n      }\n      return a[1] - b[1];\n    });\n    if (!!!JSON.parse(exercise.ascendant)) {\n      squares.reverse();\n    }\n    return squares;\n  }\n  return [getSquareOfKnight(exercise.position), exercise.squares_to_go];\n};\nconst getAllPiecesExceptKnight = position => {\n  const blackPieces = {};\n  for (const [square, piece] of Object.entries(position)) {\n    if (piece !== \"wN\") {\n      blackPieces[square] = piece;\n    }\n  }\n  return blackPieces;\n};\nconst getSquareOfKnight = position => {\n  for (const [square, piece] of Object.entries(position)) {\n    if (piece === \"wN\") {\n      return square;\n    }\n  }\n};\nconst moveLikesKnight = (sourceSquare, targetSquare) => {\n  const fileDifference = Math.abs(sourceSquare[0].charCodeAt(0) - targetSquare[0].charCodeAt(0));\n  const rankDifference = Math.abs(sourceSquare[1] - targetSquare[1]);\n  if (fileDifference === 1 && rankDifference === 2 || fileDifference === 2 && rankDifference === 1) {\n    return true;\n  }\n  return false;\n};\nconst updateKnightInPosition = (originalPosition, square) => {\n  const blackPieces = getAllPiecesExceptKnight(originalPosition);\n  const position = {\n    ...blackPieces,\n    [square]: \"wN\"\n  };\n  return position;\n};\nexport { getSquarestoGo, getAllPiecesExceptKnight, moveLikesKnight, updateKnightInPosition, getSquareOfKnight, getInvalidSquaresByPosition };\nvar _c, _c2;\n$RefreshReg$(_c, \"CoordBySquare\");\n$RefreshReg$(_c2, \"SquareByCoord\");","map":{"version":3,"names":["getInvalidSquaresByPiece","square","piece","getPawnSquaresAttacked","concat","getRookSquaresAttacked","getKnightSquaresAttacked","getBishopSquaresAttacked","getQueenSquaresAttacked","CoordBySquare","file","rank","charCodeAt","SquareByCoord","coord","String","fromCharCode","squares","push","i","j","Math","abs","getKingSquaresAttacked","getInvalidSquaresByPosition","position","Object","entries","getSquarestoGo","exercise","squares_to_go","invalidSquares","includes","sort","a","b","JSON","parse","ascendant","reverse","getSquareOfKnight","getAllPiecesExceptKnight","blackPieces","moveLikesKnight","sourceSquare","targetSquare","fileDifference","rankDifference","updateKnightInPosition","originalPosition"],"sources":["C:/Users/user/Desktop/Chess-Knight-Exercises-main/src/integrations/functions.js"],"sourcesContent":["\nconst getInvalidSquaresByPiece = (square, piece) => {\n    switch (piece) {\n        case \"bP\":\n            return getPawnSquaresAttacked(square).concat([square]);\n        case \"bR\":\n            return getRookSquaresAttacked(square).concat([square]);\n        case \"bN\":\n            return getKnightSquaresAttacked(square).concat([square]);\n        case \"bB\":\n            return getBishopSquaresAttacked(square).concat([square]);\n        case \"bQ\":\n            return getQueenSquaresAttacked(square).concat([square]);\n        // case \"bK\":\n            // return getKingSquaresAttacked(square).concat([square]);\n        default:\n            return [square];\n    }\n};\n\nconst CoordBySquare = (square) => {\n    const file = square[0];\n    const rank = square[1];\n    return [file.charCodeAt(0) - 97, rank - 1];\n};\n\nconst SquareByCoord = (coord) => {\n    const file = String.fromCharCode(coord[0] + 97);\n    const rank = coord[1] + 1;\n    return file + rank;\n};\n\n\nconst getPawnSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    if (coord[0] > 0){\n        squares.push(SquareByCoord([coord[0] - 1, coord[1] - 1]));\n    }\n    if (coord[0] < 7){\n        squares.push(SquareByCoord([coord[0] + 1, coord[1] - 1]));\n    }\n    return squares;\n};\n\nconst getRookSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            squares.push(SquareByCoord([i, coord[1]]));\n        }\n        if (i !== coord[1]) {\n            squares.push(SquareByCoord([coord[0], i]));\n        }\n    }\n    return squares;\n};\n\nconst getKnightSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -2; i < 3; i++) {\n        for (let j = -2; j < 3; j++) {\n            if (Math.abs(i) + Math.abs(j) === 3) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getBishopSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            if (i - coord[0] + coord[1] >= 0 && i - coord[0] + coord[1] < 8) {\n                squares.push(SquareByCoord([i, i - coord[0] + coord[1]]));\n            }\n            if (coord[0] - i + coord[1] >= 0 && coord[0] - i + coord[1] < 8) {\n                squares.push(SquareByCoord([i, coord[0] - i + coord[1]]));\n            }\n        }\n    }\n    return squares;\n};\n\nconst getQueenSquaresAttacked = (square) => {\n    return getRookSquaresAttacked(square).concat(getBishopSquaresAttacked(square));\n};\n\nconst getKingSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            if (i !== 0 || j !== 0) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getInvalidSquaresByPosition = (position) => {\n    const squares = [];\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece !== \"wN\") {\n            squares.push(...getInvalidSquaresByPiece(square, piece));\n        }\n    }\n    return squares;\n};\n\n\nconst getSquarestoGo = (exercise) => {\n    if (exercise.squares_to_go === \"all\") {\n        const invalidSquares = getInvalidSquaresByPosition(exercise.position);\n        const squares = [];\n        for (let i = 1; i < 9; i++) {\n            for (let j = 1; j < 9; j++) {\n                const square = SquareByCoord([i - 1, j - 1]);\n                if (!invalidSquares.includes(square)) {\n                    squares.push(square);\n                }\n            }\n        }\n        // sort squares by file and rank\n        // order by a1, b1, c1, d1, ..., h8, a2, ...\n        squares.sort((a, b) => {\n            if (a[1] === b[1]) {\n                return a.charCodeAt(0) - b.charCodeAt(0);\n            }\n            return a[1] - b[1];\n        });\n        if (!(!!JSON.parse(exercise.ascendant))) {\n            squares.reverse();\n        }\n\n        return squares;\n    }\n    return [getSquareOfKnight(exercise.position), exercise.squares_to_go];\n};\n\nconst getAllPiecesExceptKnight = (position) => {\n\tconst blackPieces = {};\n\tfor (const [square, piece] of Object.entries(position)) {\n\t\tif (piece !== \"wN\") {\n\t\t\tblackPieces[square] = piece;\n\t\t}\n\t}\n\treturn blackPieces;\n};\n\nconst getSquareOfKnight = (position) => {\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece === \"wN\") {\n            return square;\n        }\n    }\n};\n\nconst moveLikesKnight = (sourceSquare, targetSquare) => {\n    const fileDifference = Math.abs(sourceSquare[0].charCodeAt(0) - targetSquare[0].charCodeAt(0));\n    const rankDifference = Math.abs(sourceSquare[1] - targetSquare[1]);\n    if ((fileDifference === 1 && rankDifference === 2) || (fileDifference === 2 && rankDifference === 1)) {\n        return true;\n    }\n    return false;\n};\n\nconst updateKnightInPosition = (originalPosition, square) => {\n    const blackPieces = getAllPiecesExceptKnight(originalPosition);\n    const position = {...blackPieces, [square]: \"wN\" };\n    return position;\n};\n\n\nexport {\n    getSquarestoGo,\n    getAllPiecesExceptKnight,\n    moveLikesKnight,\n    updateKnightInPosition,\n    getSquareOfKnight,\n    getInvalidSquaresByPosition,\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}