{"ast":null,"code":"import _defineProperty from\"C:/Users/user/Documents/GitHub/NEw/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/Users/user/Documents/GitHub/NEw/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/user/Documents/GitHub/NEw/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/user/Documents/GitHub/NEw/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var getInvalidSquaresByPiece=function getInvalidSquaresByPiece(square,piece){switch(piece){case\"bP\":return getPawnSquaresAttacked(square).concat([square]);case\"bR\":return getRookSquaresAttacked(square).concat([square]);case\"bN\":return getKnightSquaresAttacked(square).concat([square]);case\"bB\":return getBishopSquaresAttacked(square).concat([square]);case\"bQ\":return getQueenSquaresAttacked(square).concat([square]);// case \"bK\":\n// return getKingSquaresAttacked(square).concat([square]);\ndefault:return[square];}};var CoordBySquare=function CoordBySquare(square){var file=square[0];var rank=square[1];return[file.charCodeAt(0)-97,rank-1];};var SquareByCoord=function SquareByCoord(coord){var file=String.fromCharCode(coord[0]+97);var rank=coord[1]+1;return file+rank;};var getPawnSquaresAttacked=function getPawnSquaresAttacked(square){var squares=[];var coord=CoordBySquare(square);if(coord[0]>0){squares.push(SquareByCoord([coord[0]-1,coord[1]-1]));}if(coord[0]<7){squares.push(SquareByCoord([coord[0]+1,coord[1]-1]));}return squares;};var getRookSquaresAttacked=function getRookSquaresAttacked(square){var squares=[];var coord=CoordBySquare(square);for(var i=0;i<8;i++){if(i!==coord[0]){squares.push(SquareByCoord([i,coord[1]]));}if(i!==coord[1]){squares.push(SquareByCoord([coord[0],i]));}}return squares;};var getKnightSquaresAttacked=function getKnightSquaresAttacked(square){var squares=[];var coord=CoordBySquare(square);for(var i=-2;i<3;i++){for(var j=-2;j<3;j++){if(Math.abs(i)+Math.abs(j)===3){if(coord[0]+i>=0&&coord[0]+i<8&&coord[1]+j>=0&&coord[1]+j<8){squares.push(SquareByCoord([coord[0]+i,coord[1]+j]));}}}}return squares;};var getBishopSquaresAttacked=function getBishopSquaresAttacked(square){var squares=[];var coord=CoordBySquare(square);for(var i=0;i<8;i++){if(i!==coord[0]){if(i-coord[0]+coord[1]>=0&&i-coord[0]+coord[1]<8){squares.push(SquareByCoord([i,i-coord[0]+coord[1]]));}if(coord[0]-i+coord[1]>=0&&coord[0]-i+coord[1]<8){squares.push(SquareByCoord([i,coord[0]-i+coord[1]]));}}}return squares;};var getQueenSquaresAttacked=function getQueenSquaresAttacked(square){return getRookSquaresAttacked(square).concat(getBishopSquaresAttacked(square));};var getKingSquaresAttacked=function getKingSquaresAttacked(square){var squares=[];var coord=CoordBySquare(square);for(var i=-1;i<2;i++){for(var j=-1;j<2;j++){if(i!==0||j!==0){if(coord[0]+i>=0&&coord[0]+i<8&&coord[1]+j>=0&&coord[1]+j<8){squares.push(SquareByCoord([coord[0]+i,coord[1]+j]));}}}}return squares;};var getInvalidSquaresByPosition=function getInvalidSquaresByPosition(position){var squares=[];for(var _i=0,_Object$entries=Object.entries(position);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),square=_Object$entries$_i[0],piece=_Object$entries$_i[1];if(piece!==\"wN\"){squares.push.apply(squares,_toConsumableArray(getInvalidSquaresByPiece(square,piece)));}}return squares;};var getSquarestoGo=function getSquarestoGo(exercise){if(exercise.squares_to_go===\"all\"){var invalidSquares=getInvalidSquaresByPosition(exercise.position);var squares=[];for(var i=1;i<9;i++){for(var j=1;j<9;j++){var square=SquareByCoord([i-1,j-1]);if(!invalidSquares.includes(square)){squares.push(square);}}}// sort squares by file and rank\n// order by a1, b1, c1, d1, ..., h8, a2, ...\nsquares.sort(function(a,b){if(a[1]===b[1]){return a.charCodeAt(0)-b.charCodeAt(0);}return a[1]-b[1];});if(!!!JSON.parse(exercise.ascendant)){squares.reverse();}return squares;}return[getSquareOfKnight(exercise.position),exercise.squares_to_go];};var getAllPiecesExceptKnight=function getAllPiecesExceptKnight(position){var blackPieces={};for(var _i2=0,_Object$entries2=Object.entries(position);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),square=_Object$entries2$_i[0],piece=_Object$entries2$_i[1];if(piece!==\"wN\"){blackPieces[square]=piece;}}return blackPieces;};var getSquareOfKnight=function getSquareOfKnight(position){for(var _i3=0,_Object$entries3=Object.entries(position);_i3<_Object$entries3.length;_i3++){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),square=_Object$entries3$_i[0],piece=_Object$entries3$_i[1];if(piece===\"wN\"){return square;}}};var moveLikesKnight=function moveLikesKnight(sourceSquare,targetSquare){var fileDifference=Math.abs(sourceSquare[0].charCodeAt(0)-targetSquare[0].charCodeAt(0));var rankDifference=Math.abs(sourceSquare[1]-targetSquare[1]);if(fileDifference===1&&rankDifference===2||fileDifference===2&&rankDifference===1){return true;}return false;};var updateKnightInPosition=function updateKnightInPosition(originalPosition,square){var blackPieces=getAllPiecesExceptKnight(originalPosition);var position=_objectSpread(_objectSpread({},blackPieces),{},_defineProperty({},square,\"wN\"));return position;};export{getSquarestoGo,getAllPiecesExceptKnight,moveLikesKnight,updateKnightInPosition,getSquareOfKnight,getInvalidSquaresByPosition};","map":{"version":3,"names":["getInvalidSquaresByPiece","square","piece","getPawnSquaresAttacked","concat","getRookSquaresAttacked","getKnightSquaresAttacked","getBishopSquaresAttacked","getQueenSquaresAttacked","CoordBySquare","file","rank","charCodeAt","SquareByCoord","coord","String","fromCharCode","squares","push","i","j","Math","abs","getKingSquaresAttacked","getInvalidSquaresByPosition","position","Object","entries","getSquarestoGo","exercise","squares_to_go","invalidSquares","includes","sort","a","b","JSON","parse","ascendant","reverse","getSquareOfKnight","getAllPiecesExceptKnight","blackPieces","moveLikesKnight","sourceSquare","targetSquare","fileDifference","rankDifference","updateKnightInPosition","originalPosition"],"sources":["C:/Users/user/Documents/GitHub/NEw/src/integrations/functions.js"],"sourcesContent":["\nconst getInvalidSquaresByPiece = (square, piece) => {\n    switch (piece) {\n        case \"bP\":\n            return getPawnSquaresAttacked(square).concat([square]);\n        case \"bR\":\n            return getRookSquaresAttacked(square).concat([square]);\n        case \"bN\":\n            return getKnightSquaresAttacked(square).concat([square]);\n        case \"bB\":\n            return getBishopSquaresAttacked(square).concat([square]);\n        case \"bQ\":\n            return getQueenSquaresAttacked(square).concat([square]);\n        // case \"bK\":\n            // return getKingSquaresAttacked(square).concat([square]);\n        default:\n            return [square];\n    }\n};\n\nconst CoordBySquare = (square) => {\n    const file = square[0];\n    const rank = square[1];\n    return [file.charCodeAt(0) - 97, rank - 1];\n};\n\nconst SquareByCoord = (coord) => {\n    const file = String.fromCharCode(coord[0] + 97);\n    const rank = coord[1] + 1;\n    return file + rank;\n};\n\n\nconst getPawnSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    if (coord[0] > 0){\n        squares.push(SquareByCoord([coord[0] - 1, coord[1] - 1]));\n    }\n    if (coord[0] < 7){\n        squares.push(SquareByCoord([coord[0] + 1, coord[1] - 1]));\n    }\n    return squares;\n};\n\nconst getRookSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            squares.push(SquareByCoord([i, coord[1]]));\n        }\n        if (i !== coord[1]) {\n            squares.push(SquareByCoord([coord[0], i]));\n        }\n    }\n    return squares;\n};\n\nconst getKnightSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -2; i < 3; i++) {\n        for (let j = -2; j < 3; j++) {\n            if (Math.abs(i) + Math.abs(j) === 3) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getBishopSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            if (i - coord[0] + coord[1] >= 0 && i - coord[0] + coord[1] < 8) {\n                squares.push(SquareByCoord([i, i - coord[0] + coord[1]]));\n            }\n            if (coord[0] - i + coord[1] >= 0 && coord[0] - i + coord[1] < 8) {\n                squares.push(SquareByCoord([i, coord[0] - i + coord[1]]));\n            }\n        }\n    }\n    return squares;\n};\n\nconst getQueenSquaresAttacked = (square) => {\n    return getRookSquaresAttacked(square).concat(getBishopSquaresAttacked(square));\n};\n\nconst getKingSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            if (i !== 0 || j !== 0) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getInvalidSquaresByPosition = (position) => {\n    const squares = [];\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece !== \"wN\") {\n            squares.push(...getInvalidSquaresByPiece(square, piece));\n        }\n    }\n    return squares;\n};\n\n\nconst getSquarestoGo = (exercise) => {\n    if (exercise.squares_to_go === \"all\") {\n        const invalidSquares = getInvalidSquaresByPosition(exercise.position);\n        const squares = [];\n        for (let i = 1; i < 9; i++) {\n            for (let j = 1; j < 9; j++) {\n                const square = SquareByCoord([i - 1, j - 1]);\n                if (!invalidSquares.includes(square)) {\n                    squares.push(square);\n                }\n            }\n        }\n        // sort squares by file and rank\n        // order by a1, b1, c1, d1, ..., h8, a2, ...\n        squares.sort((a, b) => {\n            if (a[1] === b[1]) {\n                return a.charCodeAt(0) - b.charCodeAt(0);\n            }\n            return a[1] - b[1];\n        });\n        if (!(!!JSON.parse(exercise.ascendant))) {\n            squares.reverse();\n        }\n\n        return squares;\n    }\n    return [getSquareOfKnight(exercise.position), exercise.squares_to_go];\n};\n\nconst getAllPiecesExceptKnight = (position) => {\n\tconst blackPieces = {};\n\tfor (const [square, piece] of Object.entries(position)) {\n\t\tif (piece !== \"wN\") {\n\t\t\tblackPieces[square] = piece;\n\t\t}\n\t}\n\treturn blackPieces;\n};\n\nconst getSquareOfKnight = (position) => {\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece === \"wN\") {\n            return square;\n        }\n    }\n};\n\nconst moveLikesKnight = (sourceSquare, targetSquare) => {\n    const fileDifference = Math.abs(sourceSquare[0].charCodeAt(0) - targetSquare[0].charCodeAt(0));\n    const rankDifference = Math.abs(sourceSquare[1] - targetSquare[1]);\n    if ((fileDifference === 1 && rankDifference === 2) || (fileDifference === 2 && rankDifference === 1)) {\n        return true;\n    }\n    return false;\n};\n\nconst updateKnightInPosition = (originalPosition, square) => {\n    const blackPieces = getAllPiecesExceptKnight(originalPosition);\n    const position = {...blackPieces, [square]: \"wN\" };\n    return position;\n};\n\n\nexport {\n    getSquarestoGo,\n    getAllPiecesExceptKnight,\n    moveLikesKnight,\n    updateKnightInPosition,\n    getSquareOfKnight,\n    getInvalidSquaresByPosition,\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}