{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Chess-Knight-Exercises-main\\\\src\\\\integrations\\\\ChessPuzzle.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getSquarestoGo, getAllPiecesExceptKnight, moveLikesKnight, updateKnightInPosition, getSquareOfKnight, getInvalidSquaresByPosition } from \"./functions\";\nimport Chessboard from \"chessboardjsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChessPuzzle extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      position: this.props.exercise.position,\n      squareOfKnight: getSquareOfKnight(this.props.exercise.position),\n      OtherPieces: getAllPiecesExceptKnight(this.props.exercise.position),\n      invalidSquares: getInvalidSquaresByPosition(this.props.exercise.position),\n      squaresToGo: getSquarestoGo(this.props.exercise),\n      actualSquareToGoIndex: 1,\n      squareStyles: {}\n    };\n    this.hasEnded = () => {\n      return this.state.actualSquareToGoIndex === this.state.squaresToGo.length;\n    };\n    this.reset = () => {\n      const position = this.props.exercise.position;\n      const squaresToGo = getSquarestoGo(this.props.exercise);\n      this.setState({\n        position: position,\n        squareOfKnight: getSquareOfKnight(position),\n        OtherPieces: getAllPiecesExceptKnight(position),\n        invalidSquares: getInvalidSquaresByPosition(position),\n        squaresToGo: squaresToGo,\n        actualSquareToGoIndex: 1,\n        squareStyles: {\n          [squaresToGo[1]]: {\n            backgroundColor: \"rgba(255, 255, 0, 0.4)\"\n          }\n        }\n      });\n      this.props.contextExercise.setSquares(\"totalToGo\", squaresToGo.length - 1);\n    };\n    this.allowDrag = _ref => {\n      let {\n        piece\n      } = _ref;\n      return piece === \"wN\";\n    };\n    this.moveTheKnight = (sourceSquare, targetSquare) => {\n      if (moveLikesKnight(sourceSquare, targetSquare) && !this.state.invalidSquares.includes(targetSquare)) {\n        this.setState({\n          position: updateKnightInPosition(this.props.exercise.position, targetSquare),\n          squareOfKnight: targetSquare\n        });\n        if (targetSquare === this.state.squaresToGo[this.state.actualSquareToGoIndex]) {\n          this.props.contextExercise.setSquares(\"squaresDone\", this.state.actualSquareToGoIndex);\n          this.setState({\n            actualSquareToGoIndex: this.state.actualSquareToGoIndex + 1,\n            actualSquareToGo: this.state.squaresToGo[this.state.actualSquareToGoIndex + 1],\n            squareStyles: {\n              [this.state.squaresToGo[this.state.actualSquareToGoIndex + 1]]: {\n                backgroundColor: \"rgba(255, 255, 0, 0.4)\"\n              }\n            }\n          });\n        }\n        if (!this.props.timeIsActive) {\n          this.props.context.setTimer(\"playPauseTime\");\n        }\n      } else if (moveLikesKnight(sourceSquare, targetSquare)) {\n        this.props.context.setTimer(\"addPenalization\");\n      } else {\n        return;\n      }\n    };\n    this.onDrop = _ref2 => {\n      let {\n        sourceSquare,\n        targetSquare\n      } = _ref2;\n      this.moveTheKnight(sourceSquare, targetSquare);\n    };\n    this.onSquareClick = square => {\n      this.moveTheKnight(this.state.squareOfKnight, square);\n    };\n  }\n  componentDidMount() {\n    this.setSquareStyles();\n  }\n  componentDidUpdate() {\n    if (!this.props.timeIsActive && this.props.hasReseted) {\n      this.reset();\n      this.props.context.setTimerState({\n        ...this.props.context.timer,\n        hasReseted: false\n      });\n    }\n    if (this.hasEnded() && !this.props.hasEnded) {\n      this.props.context.setTimer(\"playPauseTime\");\n      this.props.context.setTimer(\"endGame\");\n    }\n  }\n  setSquareStyles() {\n    const {\n      squaresToGo,\n      actualSquareToGoIndex\n    } = this.state;\n    const squareStyles = {};\n    for (let i = 1; i < squaresToGo.length; i++) {\n      if (i === actualSquareToGoIndex) {\n        squareStyles[squaresToGo[i]] = {\n          backgroundColor: \"green\"\n        };\n      } else {\n        squareStyles[squaresToGo[i]] = {\n          backgroundColor: \"green\"\n        };\n      }\n    }\n    this.setState({\n      squareStyles\n    });\n  }\n  render() {\n    const {\n      position,\n      squareStyles\n    } = this.state;\n    return this.props.children({\n      squareStyles,\n      position: position,\n      onDrop: this.onDrop,\n      allowDrag: this.allowDrag,\n      onSquareClick: this.onSquareClick\n    });\n  }\n}\nChessPuzzle.propTypes = {\n  children: PropTypes.func\n};\nexport default function ChessPuzzleBoard(props) {\n  _s();\n  const context = useContext(props.context);\n  const contextExercise = useContext(props.contextExercise);\n  return /*#__PURE__*/_jsxDEV(ChessPuzzle, {\n    context: context,\n    exercise: props.exercise,\n    contextExercise: contextExercise,\n    timeIsActive: context.timer.timeIsActive,\n    hasReseted: context.timer.hasReseted,\n    hasEnded: context.timer.hasEnded,\n    penalizedMode: context.timer.penalizedMode,\n    children: _ref3 => {\n      let {\n        position,\n        onDrop,\n        allowDrag,\n        onSquareClick,\n        squareStyles\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: position,\n        onDrop: onDrop,\n        allowDrag: allowDrag,\n        orientation: props.orientation,\n        squareStyles: squareStyles,\n        onSquareClick: onSquareClick,\n        calcWidth: _ref4 => {\n          let {\n            screenWidth\n          } = _ref4;\n          return Math.min(screenWidth - 32 - 8, 560);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(ChessPuzzleBoard, \"uwikWKGvBIjAhrXzJdMh8DHbMQg=\");\n_c = ChessPuzzleBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessPuzzleBoard\");","map":{"version":3,"names":["React","Component","useContext","PropTypes","getSquarestoGo","getAllPiecesExceptKnight","moveLikesKnight","updateKnightInPosition","getSquareOfKnight","getInvalidSquaresByPosition","Chessboard","ChessPuzzle","state","position","props","exercise","squareOfKnight","OtherPieces","invalidSquares","squaresToGo","actualSquareToGoIndex","squareStyles","hasEnded","length","reset","setState","backgroundColor","contextExercise","setSquares","allowDrag","piece","moveTheKnight","sourceSquare","targetSquare","includes","actualSquareToGo","timeIsActive","context","setTimer","onDrop","onSquareClick","square","componentDidMount","setSquareStyles","componentDidUpdate","hasReseted","setTimerState","timer","i","render","children","propTypes","func","ChessPuzzleBoard","penalizedMode","orientation","screenWidth","Math","min"],"sources":["C:/Users/user/Desktop/Chess-Knight-Exercises-main/src/integrations/ChessPuzzle.js"],"sourcesContent":["import React, { Component, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  getSquarestoGo,\n  getAllPiecesExceptKnight,\n  moveLikesKnight,\n  updateKnightInPosition,\n  getSquareOfKnight,\n  getInvalidSquaresByPosition,\n} from \"./functions\";\nimport Chessboard from \"chessboardjsx\";\n\nclass ChessPuzzle extends Component {\n  static propTypes = { children: PropTypes.func };\n  state = {\n    position: this.props.exercise.position,\n    squareOfKnight: getSquareOfKnight(this.props.exercise.position),\n    OtherPieces: getAllPiecesExceptKnight(this.props.exercise.position),\n    invalidSquares: getInvalidSquaresByPosition(this.props.exercise.position),\n    squaresToGo: getSquarestoGo(this.props.exercise),\n    actualSquareToGoIndex: 1,\n    squareStyles: {},\n  };\n\n  componentDidMount() {\n    this.setSquareStyles();\n  }\n\n  componentDidUpdate() {\n    if (!this.props.timeIsActive && this.props.hasReseted) {\n      this.reset();\n      this.props.context.setTimerState({ ...this.props.context.timer, hasReseted: false });\n    }\n    if (this.hasEnded() && !this.props.hasEnded) {\n      this.props.context.setTimer(\"playPauseTime\");\n      this.props.context.setTimer(\"endGame\");\n    }\n  }\n\n  hasEnded = () => {\n    return this.state.actualSquareToGoIndex === this.state.squaresToGo.length;\n  };\n\n  reset = () => {\n    const position = this.props.exercise.position;\n    const squaresToGo = getSquarestoGo(this.props.exercise);\n    this.setState({\n      position: position,\n      squareOfKnight: getSquareOfKnight(position),\n      OtherPieces: getAllPiecesExceptKnight(position),\n      invalidSquares: getInvalidSquaresByPosition(position),\n      squaresToGo: squaresToGo,\n      actualSquareToGoIndex: 1,\n      squareStyles: { [squaresToGo[1]]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" } },\n    });\n    this.props.contextExercise.setSquares(\"totalToGo\", squaresToGo.length - 1);\n  };\n\n  allowDrag = ({ piece }) => {\n    return piece === \"wN\";\n  };\n\n  moveTheKnight = (sourceSquare, targetSquare) => {\n    if (moveLikesKnight(sourceSquare, targetSquare) && !this.state.invalidSquares.includes(targetSquare)) {\n      this.setState({\n        position: updateKnightInPosition(this.props.exercise.position, targetSquare),\n        squareOfKnight: targetSquare,\n      });\n      if (targetSquare === this.state.squaresToGo[this.state.actualSquareToGoIndex]) {\n        this.props.contextExercise.setSquares(\"squaresDone\", this.state.actualSquareToGoIndex);\n        this.setState({\n          actualSquareToGoIndex: this.state.actualSquareToGoIndex + 1,\n          actualSquareToGo: this.state.squaresToGo[this.state.actualSquareToGoIndex + 1],\n          squareStyles: { [this.state.squaresToGo[this.state.actualSquareToGoIndex + 1]]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" } },\n        });\n      }\n      if (!this.props.timeIsActive) {\n        this.props.context.setTimer(\"playPauseTime\");\n      }\n    } else if (moveLikesKnight(sourceSquare, targetSquare)) {\n      this.props.context.setTimer(\"addPenalization\");\n    } else {\n      return;\n    }\n  };\n\n  onDrop = ({ sourceSquare, targetSquare }) => {\n    this.moveTheKnight(sourceSquare, targetSquare);\n  };\n\n  onSquareClick = (square) => {\n    this.moveTheKnight(this.state.squareOfKnight, square);\n  };\n\n  setSquareStyles() {\n    const { squaresToGo, actualSquareToGoIndex } = this.state;\n    const squareStyles = {};\n\n    for (let i = 1; i < squaresToGo.length; i++) {\n      if (i === actualSquareToGoIndex) {\n        squareStyles[squaresToGo[i]] = { backgroundColor: \"green\" };\n      } else {\n        squareStyles[squaresToGo[i]] = { backgroundColor: \"green\" };\n      }\n    }\n\n    this.setState({ squareStyles });\n  }\n\n  render() {\n    const { position, squareStyles } = this.state;\n\n    return this.props.children({\n      squareStyles,\n      position: position,\n      onDrop: this.onDrop,\n      allowDrag: this.allowDrag,\n      onSquareClick: this.onSquareClick,\n    });\n  }\n}\n\nexport default function ChessPuzzleBoard(props) {\n  const context = useContext(props.context);\n  const contextExercise = useContext(props.contextExercise);\n  return (\n    <ChessPuzzle\n      context={context}\n      exercise={props.exercise}\n      contextExercise={contextExercise}\n      timeIsActive={context.timer.timeIsActive}\n      hasReseted={context.timer.hasReseted}\n      hasEnded={context.timer.hasEnded}\n      penalizedMode={context.timer.penalizedMode}\n    >\n      {({ position, onDrop, allowDrag, onSquareClick, squareStyles }) => (\n        <Chessboard\n          position={position}\n          onDrop={onDrop}\n          allowDrag={allowDrag}\n          orientation={props.orientation}\n          squareStyles={squareStyles}\n          onSquareClick={onSquareClick}\n          calcWidth={({ screenWidth }) => {\n            return Math.min(screenWidth - 32 - 8, 560);\n          }}\n        />\n      )}\n    </ChessPuzzle>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACpD,OAAOC,SAAS,MAAM,YAAY;AAClC,SACEC,cAAc,EACdC,wBAAwB,EACxBC,eAAe,EACfC,sBAAsB,EACtBC,iBAAiB,EACjBC,2BAA2B,QACtB,aAAa;AACpB,OAAOC,UAAU,MAAM,eAAe;AAAC;AAEvC,MAAMC,WAAW,SAASV,SAAS,CAAC;EAAA;IAAA;IAAA,KAElCW,KAAK,GAAG;MACNC,QAAQ,EAAE,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,QAAQ;MACtCG,cAAc,EAAER,iBAAiB,CAAC,IAAI,CAACM,KAAK,CAACC,QAAQ,CAACF,QAAQ,CAAC;MAC/DI,WAAW,EAAEZ,wBAAwB,CAAC,IAAI,CAACS,KAAK,CAACC,QAAQ,CAACF,QAAQ,CAAC;MACnEK,cAAc,EAAET,2BAA2B,CAAC,IAAI,CAACK,KAAK,CAACC,QAAQ,CAACF,QAAQ,CAAC;MACzEM,WAAW,EAAEf,cAAc,CAAC,IAAI,CAACU,KAAK,CAACC,QAAQ,CAAC;MAChDK,qBAAqB,EAAE,CAAC;MACxBC,YAAY,EAAE,CAAC;IACjB,CAAC;IAAA,KAiBDC,QAAQ,GAAG,MAAM;MACf,OAAO,IAAI,CAACV,KAAK,CAACQ,qBAAqB,KAAK,IAAI,CAACR,KAAK,CAACO,WAAW,CAACI,MAAM;IAC3E,CAAC;IAAA,KAEDC,KAAK,GAAG,MAAM;MACZ,MAAMX,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,QAAQ;MAC7C,MAAMM,WAAW,GAAGf,cAAc,CAAC,IAAI,CAACU,KAAK,CAACC,QAAQ,CAAC;MACvD,IAAI,CAACU,QAAQ,CAAC;QACZZ,QAAQ,EAAEA,QAAQ;QAClBG,cAAc,EAAER,iBAAiB,CAACK,QAAQ,CAAC;QAC3CI,WAAW,EAAEZ,wBAAwB,CAACQ,QAAQ,CAAC;QAC/CK,cAAc,EAAET,2BAA2B,CAACI,QAAQ,CAAC;QACrDM,WAAW,EAAEA,WAAW;QACxBC,qBAAqB,EAAE,CAAC;QACxBC,YAAY,EAAE;UAAE,CAACF,WAAW,CAAC,CAAC,CAAC,GAAG;YAAEO,eAAe,EAAE;UAAyB;QAAE;MAClF,CAAC,CAAC;MACF,IAAI,CAACZ,KAAK,CAACa,eAAe,CAACC,UAAU,CAAC,WAAW,EAAET,WAAW,CAACI,MAAM,GAAG,CAAC,CAAC;IAC5E,CAAC;IAAA,KAEDM,SAAS,GAAG,QAAe;MAAA,IAAd;QAAEC;MAAM,CAAC;MACpB,OAAOA,KAAK,KAAK,IAAI;IACvB,CAAC;IAAA,KAEDC,aAAa,GAAG,CAACC,YAAY,EAAEC,YAAY,KAAK;MAC9C,IAAI3B,eAAe,CAAC0B,YAAY,EAAEC,YAAY,CAAC,IAAI,CAAC,IAAI,CAACrB,KAAK,CAACM,cAAc,CAACgB,QAAQ,CAACD,YAAY,CAAC,EAAE;QACpG,IAAI,CAACR,QAAQ,CAAC;UACZZ,QAAQ,EAAEN,sBAAsB,CAAC,IAAI,CAACO,KAAK,CAACC,QAAQ,CAACF,QAAQ,EAAEoB,YAAY,CAAC;UAC5EjB,cAAc,EAAEiB;QAClB,CAAC,CAAC;QACF,IAAIA,YAAY,KAAK,IAAI,CAACrB,KAAK,CAACO,WAAW,CAAC,IAAI,CAACP,KAAK,CAACQ,qBAAqB,CAAC,EAAE;UAC7E,IAAI,CAACN,KAAK,CAACa,eAAe,CAACC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAChB,KAAK,CAACQ,qBAAqB,CAAC;UACtF,IAAI,CAACK,QAAQ,CAAC;YACZL,qBAAqB,EAAE,IAAI,CAACR,KAAK,CAACQ,qBAAqB,GAAG,CAAC;YAC3De,gBAAgB,EAAE,IAAI,CAACvB,KAAK,CAACO,WAAW,CAAC,IAAI,CAACP,KAAK,CAACQ,qBAAqB,GAAG,CAAC,CAAC;YAC9EC,YAAY,EAAE;cAAE,CAAC,IAAI,CAACT,KAAK,CAACO,WAAW,CAAC,IAAI,CAACP,KAAK,CAACQ,qBAAqB,GAAG,CAAC,CAAC,GAAG;gBAAEM,eAAe,EAAE;cAAyB;YAAE;UAChI,CAAC,CAAC;QACJ;QACA,IAAI,CAAC,IAAI,CAACZ,KAAK,CAACsB,YAAY,EAAE;UAC5B,IAAI,CAACtB,KAAK,CAACuB,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC;QAC9C;MACF,CAAC,MAAM,IAAIhC,eAAe,CAAC0B,YAAY,EAAEC,YAAY,CAAC,EAAE;QACtD,IAAI,CAACnB,KAAK,CAACuB,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC;MAChD,CAAC,MAAM;QACL;MACF;IACF,CAAC;IAAA,KAEDC,MAAM,GAAG,SAAoC;MAAA,IAAnC;QAAEP,YAAY;QAAEC;MAAa,CAAC;MACtC,IAAI,CAACF,aAAa,CAACC,YAAY,EAAEC,YAAY,CAAC;IAChD,CAAC;IAAA,KAEDO,aAAa,GAAIC,MAAM,IAAK;MAC1B,IAAI,CAACV,aAAa,CAAC,IAAI,CAACnB,KAAK,CAACI,cAAc,EAAEyB,MAAM,CAAC;IACvD,CAAC;EAAA;EApEDC,iBAAiB,GAAG;IAClB,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAC,kBAAkB,GAAG;IACnB,IAAI,CAAC,IAAI,CAAC9B,KAAK,CAACsB,YAAY,IAAI,IAAI,CAACtB,KAAK,CAAC+B,UAAU,EAAE;MACrD,IAAI,CAACrB,KAAK,EAAE;MACZ,IAAI,CAACV,KAAK,CAACuB,OAAO,CAACS,aAAa,CAAC;QAAE,GAAG,IAAI,CAAChC,KAAK,CAACuB,OAAO,CAACU,KAAK;QAAEF,UAAU,EAAE;MAAM,CAAC,CAAC;IACtF;IACA,IAAI,IAAI,CAACvB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAACR,KAAK,CAACQ,QAAQ,EAAE;MAC3C,IAAI,CAACR,KAAK,CAACuB,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC;MAC5C,IAAI,CAACxB,KAAK,CAACuB,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC;IACxC;EACF;EAyDAK,eAAe,GAAG;IAChB,MAAM;MAAExB,WAAW;MAAEC;IAAsB,CAAC,GAAG,IAAI,CAACR,KAAK;IACzD,MAAMS,YAAY,GAAG,CAAC,CAAC;IAEvB,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,WAAW,CAACI,MAAM,EAAEyB,CAAC,EAAE,EAAE;MAC3C,IAAIA,CAAC,KAAK5B,qBAAqB,EAAE;QAC/BC,YAAY,CAACF,WAAW,CAAC6B,CAAC,CAAC,CAAC,GAAG;UAAEtB,eAAe,EAAE;QAAQ,CAAC;MAC7D,CAAC,MAAM;QACLL,YAAY,CAACF,WAAW,CAAC6B,CAAC,CAAC,CAAC,GAAG;UAAEtB,eAAe,EAAE;QAAQ,CAAC;MAC7D;IACF;IAEA,IAAI,CAACD,QAAQ,CAAC;MAAEJ;IAAa,CAAC,CAAC;EACjC;EAEA4B,MAAM,GAAG;IACP,MAAM;MAAEpC,QAAQ;MAAEQ;IAAa,CAAC,GAAG,IAAI,CAACT,KAAK;IAE7C,OAAO,IAAI,CAACE,KAAK,CAACoC,QAAQ,CAAC;MACzB7B,YAAY;MACZR,QAAQ,EAAEA,QAAQ;MAClB0B,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBV,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBW,aAAa,EAAE,IAAI,CAACA;IACtB,CAAC,CAAC;EACJ;AACF;AA5GM7B,WAAW,CACRwC,SAAS,GAAG;EAAED,QAAQ,EAAE/C,SAAS,CAACiD;AAAK,CAAC;AA6GjD,eAAe,SAASC,gBAAgB,CAACvC,KAAK,EAAE;EAAA;EAC9C,MAAMuB,OAAO,GAAGnC,UAAU,CAACY,KAAK,CAACuB,OAAO,CAAC;EACzC,MAAMV,eAAe,GAAGzB,UAAU,CAACY,KAAK,CAACa,eAAe,CAAC;EACzD,oBACE,QAAC,WAAW;IACV,OAAO,EAAEU,OAAQ;IACjB,QAAQ,EAAEvB,KAAK,CAACC,QAAS;IACzB,eAAe,EAAEY,eAAgB;IACjC,YAAY,EAAEU,OAAO,CAACU,KAAK,CAACX,YAAa;IACzC,UAAU,EAAEC,OAAO,CAACU,KAAK,CAACF,UAAW;IACrC,QAAQ,EAAER,OAAO,CAACU,KAAK,CAACzB,QAAS;IACjC,aAAa,EAAEe,OAAO,CAACU,KAAK,CAACO,aAAc;IAAA,UAE1C;MAAA,IAAC;QAAEzC,QAAQ;QAAE0B,MAAM;QAAEV,SAAS;QAAEW,aAAa;QAAEnB;MAAa,CAAC;MAAA,oBAC5D,QAAC,UAAU;QACT,QAAQ,EAAER,QAAS;QACnB,MAAM,EAAE0B,MAAO;QACf,SAAS,EAAEV,SAAU;QACrB,WAAW,EAAEf,KAAK,CAACyC,WAAY;QAC/B,YAAY,EAAElC,YAAa;QAC3B,aAAa,EAAEmB,aAAc;QAC7B,SAAS,EAAE,SAAqB;UAAA,IAApB;YAAEgB;UAAY,CAAC;UACzB,OAAOC,IAAI,CAACC,GAAG,CAACF,WAAW,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;QAC5C;MAAE;QAAA;QAAA;QAAA;MAAA,QACF;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACW;AAElB;AAAC,GA5BuBH,gBAAgB;AAAA,KAAhBA,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}