[{"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\index.js":"1","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\App.js":"3","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\Rules.js":"4","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\integrations\\ChessPuzzle.js":"5","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\SelectExercise.js":"6","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\Timer.js":"7","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\CircularProgressWithLabel.js":"8","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\integrations\\functions.js":"9"},{"size":535,"mtime":1676524895000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1676524895000,"results":"12","hashOfConfig":"11"},{"size":7950,"mtime":1685873986978,"results":"13","hashOfConfig":"11"},{"size":1762,"mtime":1686082979489,"results":"14","hashOfConfig":"11"},{"size":4861,"mtime":1685884042549,"results":"15","hashOfConfig":"11"},{"size":1801,"mtime":1685879831789,"results":"16","hashOfConfig":"11"},{"size":2332,"mtime":1685885924621,"results":"17","hashOfConfig":"11"},{"size":1109,"mtime":1685886380617,"results":"18","hashOfConfig":"11"},{"size":5697,"mtime":1676524895000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1bwkzvy",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"23"},"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\index.js",[],[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\reportWebVitals.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\App.js",["50"],[],"import { useState, createContext  } from \"react\";\nimport ChessPuzzleBoard from './integrations/ChessPuzzle';\nimport styled from 'styled-components';\nimport Rules from \"./components/Rules\";\nimport Timer from \"./components/Timer\";\nimport { Switch, Tooltip, IconButton } from \"@mui/material\";\nimport InfoIcon from '@mui/icons-material/Info';\nimport SelectExercise from \"./components/SelectExercise\";\nimport exercises from \"./exercises.json\";\n\nconst TimerContext = createContext();\nconst ExerciseContext = createContext();\n\nconst invisibleStyle = {\n  display: \"none\",\n}\n\nfunction App() {\n  const [timerState, setTimerState] = useState({\n    countPenalization: 0,\n    modePenalization: false,\n    time: 0,\n    timeIsActive: false,\n    hasReseted: true,\n    hasEnded: false,\n  })\n\n  const [timerStyle, setTimerStyle] = useState(\"normal\");\n  \n  const [exercise, setExercise] = useState(3);\n\n  const [squaresCount, setSquaresCount] = useState({\n    squaresToGo: 0,\n    squaresDone: 0,\n  });\n\n  const updateStyle = (style, time) => {\n    setTimeout(function(){\n      setTimerStyle(style);\n    }, time);\n  }\n\n  const setSquares = (option, num) => {\n    switch (option) {\n      case 'squaresDone':\n        setSquaresCount({...squaresCount, squaresDone: num});\n        break;\n      case 'totalToGo':\n        setSquaresCount({...squaresCount, squaresToGo: num, squaresDone: 0});\n        break;\n      default:\n        break;\n    }\n  }\n\n  const setTimer = (option) => {\n    switch (option) {\n    case 'playPauseTime':\n      setTimerState({...timerState, timeIsActive: !timerState.timeIsActive, hasReseted: false, hasEnded: false});\n      break;\n    case 'addPenalization':\n      if (timerState.timeIsActive){\n        setTimerState({...timerState, countPenalization: timerState.countPenalization + 1});\n        if (timerState.modePenalization){\n          setTimerState({...timerState, countPenalization: timerState.countPenalization + 1, time: timerState.time + 10000});\n          setTimerStyle(\"red\");\n          updateStyle(\"normal\", 100)\n        }\n      }\n      break;\n    case 'resetPenalization':\n      setTimerState({...timerState, countPenalization: 0, modePenalization: false, time: 0, timeIsActive: false, hasReseted: true, hasEnded: false});\n      break;\n    case 'resetAll':\n      setTimerState({...timerState, countPenalization: 0, time: 0, timeIsActive: false, hasReseted: true, hasEnded: false});\n      break;\n    case 'changeMode':\n      setTimerState({...timerState, modePenalization: !timerState.modePenalization});\n      break;\n    case 'endGame':\n      setTimerState({...timerState, timeIsActive: false, hasEnded: true});\n      break;\n    default:\n      break;\n    }\n  }\n  \n  return (\n    <CenterContainer>\n      <TimerContext.Provider value={{\n            timer: timerState,\n            setTimer: setTimer,\n            setTimerState: setTimerState,\n            timerStyle: timerStyle,\n            }}>\n      <ExerciseContext.Provider value={{\n            exercise: exercise,\n            setExercise: setExercise,\n            squaresCount: squaresCount,\n            setSquares: setSquares,\n            }}>\n        <TitleContainer>\n          <Title>Chess Knight Exercises</Title>\n          \n          <SelectExercise context={ExerciseContext} contextTimer={TimerContext} />\n        </TitleContainer>\n        <Container>\n            <LeftContainer>\n              <Rules context={ExerciseContext} />\n              <PenaltContainer style={exercise<3? {}: invisibleStyle}>\n                <SwitchContainer>\n                  <SwitchRow>\n                    <Tooltip title=\"Каждый раз, когда вы переходите на контролируемые квадраты (т.е. незаконная попытка), таймер будет оштрафован на 10 секунд.\" arrow>\n                      <IconButton>\n                        <InfoIcon fontSize=\"small\" style={{color:\"#bababa\"}}/>\n                      </IconButton>\n                    </Tooltip>\n                    <SpanSwitch>Penalization Mode</SpanSwitch>\n                    <Switch onClick={() => setTimer(\"changeMode\")} disabled={timerState.timeIsActive} checked={timerState.modePenalization} />\n                  </SwitchRow>\n                </SwitchContainer>\n                <SpanIlegal>{timerState.countPenalization} <span style={{color: \"rgb(224 74 74)\"}}>ILEGAL ATTEMPTS</span></SpanIlegal>\n              </PenaltContainer>\n              <Timer context={TimerContext} exercise={ExerciseContext} />\n            </LeftContainer>\n            <BorderChessBoard>\n              <ChessPuzzleBoard context={TimerContext} exercise={exercises[exercise]} contextExercise={ExerciseContext} />\n              <SpanMyTime style={exercise<3? {}: invisibleStyle}>\n              <SpanTime> {exercises[exercise].my_time} </SpanTime>\n              Beat my time!  \n              I dare you, I double dare you! </SpanMyTime>\n            </BorderChessBoard>\n        </Container>\n    <Footer>\n     \n    </Footer>\n      </ExerciseContext.Provider>\n      </TimerContext.Provider>\n\n    </CenterContainer>\n  );\n}\n\nexport default App;\n\n\nconst SpanTime = styled.span`\n    display: inline-block;\n    font-weight: 600;\n    text-align: center;\n    color: #bababa;\n    border-radius: 5px;\n    padding: 2px;\n    padding-left: 5px;\n    padding-right: 5px;\n    margin: 0 5px;\n    background-color: #1a1a1a;\n`;\n\nconst SpanMyTime = styled.span`\n    display: block;\n    width: 100%;\n    text-align: center;\n    font-size: 0.9em;\n    color: #bababa;\n    margin-top: 4px;\n    @media (max-width: 640px) {\n      font-size: 0.8em;\n    }\n`;\t\n\nconst Title = styled.h2`\n    margin-right: 15px;\n    margin-left: 15px;\n    @media (max-width: 640px) { \n      font-size: 1.2em;\n      margin-bottom: 10px;\n    }\n`;\n\nconst TitleContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin: 10px;\n    @media (max-width: 640px) { \n      justify-content: center;\n      margin-bottom: 0px;\n    }\n`;\n\nconst CenterContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    margin-right: 5%;\n    margin-left: 5%;\n`;\n\nconst BorderChessBoard = styled.div`\n    padding: 5px;\n    background-color: #373531;\n    margin: 5px;\n`;\n\nconst Footer = styled.footer`\n    margin: 10px;\n    margin-top: 30px;\n    margin-bottom: 30px;\n    text-align: center;\n    @media (max-width: 640px) { \n      font-size: 0.8em;\n    }\n`;\n\nconst SpanSwitch = styled.span`\n    font-weight: bold;\n`;\n\nconst SwitchRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border-radius: 10px;\n    padding: 5px;\n    margin: 7px;\n    background-color: #373531;\n    min-width: 250px;\n`;\n\nconst PenaltContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 20px;\n    @media (max-width: 900px) { \n      order: 2;\n      margin-top: 20px;\n    }\n`;\n\nconst SwitchContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-radius: 10px;\n    min-width: 250px;\n    background-color: #373531;\n`;\n\n\nconst SpanIlegal = styled.span`\n    font-weight: bold;\n    background-color: #262626;\n    border-bottom-left-radius: 10px;\n    border-bottom-right-radius: 10px;\n    padding: 12px;\n    box-shadow: rgb(0 20 0 / 25%) 0px 30px 60px -12px inset, rgb(0 0 0 / 30%) 0px 18px 36px -18px inset;\n`;\n\n\nconst LeftContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 5px;\n    margin-top: 10px;\n    @media (max-width: 900px) { \n      order: 2;\n    }\n`;\n\nconst Link = styled.a`\n    color: #4183c4;\n    text-decoration: none;\n    font-weight: bold;\n    &:hover {\n        text-decoration: underline;\n    }\n`;\n","C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\Rules.js",["51"],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\integrations\\ChessPuzzle.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\SelectExercise.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\Timer.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\components\\CircularProgressWithLabel.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\NEw\\src\\integrations\\functions.js",["52"],[],"\nconst getInvalidSquaresByPiece = (square, piece) => {\n    switch (piece) {\n        case \"bP\":\n            return getPawnSquaresAttacked(square).concat([square]);\n        case \"bR\":\n            return getRookSquaresAttacked(square).concat([square]);\n        case \"bN\":\n            return getKnightSquaresAttacked(square).concat([square]);\n        case \"bB\":\n            return getBishopSquaresAttacked(square).concat([square]);\n        case \"bQ\":\n            return getQueenSquaresAttacked(square).concat([square]);\n        // case \"bK\":\n            // return getKingSquaresAttacked(square).concat([square]);\n        default:\n            return [square];\n    }\n};\n\nconst CoordBySquare = (square) => {\n    const file = square[0];\n    const rank = square[1];\n    return [file.charCodeAt(0) - 97, rank - 1];\n};\n\nconst SquareByCoord = (coord) => {\n    const file = String.fromCharCode(coord[0] + 97);\n    const rank = coord[1] + 1;\n    return file + rank;\n};\n\n\nconst getPawnSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    if (coord[0] > 0){\n        squares.push(SquareByCoord([coord[0] - 1, coord[1] - 1]));\n    }\n    if (coord[0] < 7){\n        squares.push(SquareByCoord([coord[0] + 1, coord[1] - 1]));\n    }\n    return squares;\n};\n\nconst getRookSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            squares.push(SquareByCoord([i, coord[1]]));\n        }\n        if (i !== coord[1]) {\n            squares.push(SquareByCoord([coord[0], i]));\n        }\n    }\n    return squares;\n};\n\nconst getKnightSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -2; i < 3; i++) {\n        for (let j = -2; j < 3; j++) {\n            if (Math.abs(i) + Math.abs(j) === 3) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getBishopSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = 0; i < 8; i++) {\n        if (i !== coord[0]) {\n            if (i - coord[0] + coord[1] >= 0 && i - coord[0] + coord[1] < 8) {\n                squares.push(SquareByCoord([i, i - coord[0] + coord[1]]));\n            }\n            if (coord[0] - i + coord[1] >= 0 && coord[0] - i + coord[1] < 8) {\n                squares.push(SquareByCoord([i, coord[0] - i + coord[1]]));\n            }\n        }\n    }\n    return squares;\n};\n\nconst getQueenSquaresAttacked = (square) => {\n    return getRookSquaresAttacked(square).concat(getBishopSquaresAttacked(square));\n};\n\nconst getKingSquaresAttacked = (square) => {\n    const squares = [];\n    const coord = CoordBySquare(square);\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            if (i !== 0 || j !== 0) {\n                if (coord[0] + i >= 0 && coord[0] + i < 8 && coord[1] + j >= 0 && coord[1] + j < 8) {\n                    squares.push(SquareByCoord([coord[0] + i, coord[1] + j]));\n                }\n            }\n        }\n    }\n    return squares;\n};\n\nconst getInvalidSquaresByPosition = (position) => {\n    const squares = [];\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece !== \"wN\") {\n            squares.push(...getInvalidSquaresByPiece(square, piece));\n        }\n    }\n    return squares;\n};\n\n\nconst getSquarestoGo = (exercise) => {\n    if (exercise.squares_to_go === \"all\") {\n        const invalidSquares = getInvalidSquaresByPosition(exercise.position);\n        const squares = [];\n        for (let i = 1; i < 9; i++) {\n            for (let j = 1; j < 9; j++) {\n                const square = SquareByCoord([i - 1, j - 1]);\n                if (!invalidSquares.includes(square)) {\n                    squares.push(square);\n                }\n            }\n        }\n        // sort squares by file and rank\n        // order by a1, b1, c1, d1, ..., h8, a2, ...\n        squares.sort((a, b) => {\n            if (a[1] === b[1]) {\n                return a.charCodeAt(0) - b.charCodeAt(0);\n            }\n            return a[1] - b[1];\n        });\n        if (!(!!JSON.parse(exercise.ascendant))) {\n            squares.reverse();\n        }\n\n        return squares;\n    }\n    return [getSquareOfKnight(exercise.position), exercise.squares_to_go];\n};\n\nconst getAllPiecesExceptKnight = (position) => {\n\tconst blackPieces = {};\n\tfor (const [square, piece] of Object.entries(position)) {\n\t\tif (piece !== \"wN\") {\n\t\t\tblackPieces[square] = piece;\n\t\t}\n\t}\n\treturn blackPieces;\n};\n\nconst getSquareOfKnight = (position) => {\n    for (const [square, piece] of Object.entries(position)) {\n        if (piece === \"wN\") {\n            return square;\n        }\n    }\n};\n\nconst moveLikesKnight = (sourceSquare, targetSquare) => {\n    const fileDifference = Math.abs(sourceSquare[0].charCodeAt(0) - targetSquare[0].charCodeAt(0));\n    const rankDifference = Math.abs(sourceSquare[1] - targetSquare[1]);\n    if ((fileDifference === 1 && rankDifference === 2) || (fileDifference === 2 && rankDifference === 1)) {\n        return true;\n    }\n    return false;\n};\n\nconst updateKnightInPosition = (originalPosition, square) => {\n    const blackPieces = getAllPiecesExceptKnight(originalPosition);\n    const position = {...blackPieces, [square]: \"wN\" };\n    return position;\n};\n\n\nexport {\n    getSquarestoGo,\n    getAllPiecesExceptKnight,\n    moveLikesKnight,\n    updateKnightInPosition,\n    getSquareOfKnight,\n    getInvalidSquaresByPosition,\n};",{"ruleId":"53","severity":1,"message":"54","line":282,"column":7,"nodeType":"55","messageId":"56","endLine":282,"endColumn":11},{"ruleId":null,"fatal":true,"severity":2,"message":"57","line":20,"column":75},{"ruleId":"53","severity":1,"message":"58","line":95,"column":7,"nodeType":"55","messageId":"56","endLine":95,"endColumn":29},"no-unused-vars","'Link' is assigned a value but never used.","Identifier","unusedVar","Parsing error: Unexpected token, expected \"}\" (20:75)","'getKingSquaresAttacked' is assigned a value but never used."]